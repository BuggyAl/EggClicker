on script load:
 
	set {_letters} to "Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz"
	set {_letter-pairs::*} to {_letters} split at " "
 
	loop {_letter-pairs::*}:
 
		set {_pair::*} to loop-value split at ""
 
		set {_uppercase} to {_pair::1}
		set {_lowercase} to {_pair::2}
 
		set {letters::uppercase::%{_lowercase}%} to {_uppercase}
		set {letters::lowercase::%{_uppercase}%} to {_lowercase}
 
on script unload:
 
	delete {letters::*}
 

#function clientBlock(location: location, type: item, viewers: players):
 # set {_packet} to new play_server_block_change packet
 # set location pinfo 0 of {_packet} to {_location}
 # set "BlockData" pinfo 0 of {_packet} to {_type} # as seen on packetwrapper, this uses the blockdata pinfo
 # loop {_viewers::*}: #show peeps the new block
 #   send loop-value packet {_packet}

function switchCaseFor(text: text, to-uppercase: boolean) :: text:
 
	set {_characters::*} to {_text} split at ""
	set {_new} to ""
 
	loop {_characters::*}:
 
		set {_char} to loop-value
 
		if {_to-uppercase} is true:
			set {_char} to {letters::uppercase::%loop-value%}
		else:
			set {_char} to {letters::lowercase::%loop-value%}
 
		set {_new} to "%{_new}%%{_char}%"
 
	return {_new}
 
function uppercase(text: text) :: text:
 
	return switchCaseFor({_text}, true)
 
function lowercase(text: text) :: text:
 
	return switchCaseFor({_text}, false)
 
function capitalize(text: text) :: text:
 
	set {_char} to the first character of {_text}
	set {_char} to {letters::uppercase::%{_char}%}
 
	set {_remaining} to ""
	set {_remaining} to the last (length of {_text} - 1) characters of {_text}
 
	return "%{_char}%%{_remaining}%"
   
function getNumberFormatted(n: number) :: string:
	set {_l::*} to split "K,M,B,T,Qa,Qi,Sx,Sp,Oc,No,Dc,Ud,Dd,Td,Qad,Qid,Sxd,Spd,Ocd,Nod,Vg,Uvg,Dvg,Tvg,Qavg,Qivg,Sxvg,Spvg,Ocvg,Novg,Tg,Ut,Dt" at ","
	set {_i} to min(floor(log({_n})/3), size of {_l::*})
	return "%{_n}%" if {_i} <= 0
	set {_i2} to 1000^{_i}
	return "%{_n}/{_i2}%%{_l::%{_i}%}%"

command /testformatter <number>:
	permission: op
	trigger:
		send getNumberFormatted(arg-1) to player

function contains(list: objects, check: object) :: boolean:
	loop {%{_list}%::*}:
		if loop-value is {_check}:
			return true
	return false
	
  
  
function print(t: text):
	send "%{_t}%" to all players
	
command /viewregions:
	permission: op
	trigger:
		send "%{areas::clicker::*}%" to player
		send "Done!" to player
