command /fixregions:
	permission: op
	trigger:
		loop {rooms::*}:
			execute console command "/rg flag -w EggClicker %{rooms::%loop-value%::r}% entry allow"
			execute console command "/rg removemember -w EggClicker -a %{rooms::%loop-value%::r}%"
			send "&aFixed %{rooms::%loop-value%::r}%!"


on load:
	clear {rooms::*}
	room("spawn", "Spawn", "Clicker", egg)
	room("library", "Library", "Librarian", bookshelf)
	room("bedroom", "Bedroom", "Sleeper", red bed)
	room("kitchen", "Kitchen", "Chef", furnace)
	room("cellar", "Cellar", "Kidnapped Child", barrel)
	room("backyard", "Backyard", "Camper", campfire)
	room("mine", "Mine", "Miner", iron pickaxe)
	room("nether", "Nether", "Piglin", netherrack)
	room("stronghold", "Stronghold", "Silverfish", end portal frame)
	room("end", "End", "Enderman", endstone)
	room("eggstreet", "Egg Street", "Homeless", black concrete)
	room("mcdonalds", "McDonalds", "Fat", cooked beef)
	room("hut", "Hut", "Grandma", fern)
	room("abandoned", "Abandoned House", "Ghost", web)
	room("skyscraper", "Skyscraper", "Entrepreneur", white stained glass)
	room("lushcave", "Lush Cave", "Lush", flowering azalea)
	room("jungletemple", "Jungle Temple", "Tomb Raider", mossy cobblestone)
	room("jungle", "Jungle", "Tarzan", jungle leaves)
	room("deserttemple", "Desert Temple", "TNT", orange terracotta)
	room("desert", "Desert", "Camel", sand)
	room("park", "Park", "Bird", poppy)
	room("beach", "Beach", "Lifeguard", yellow carpet)
	room("ship", "Ship", "Pirate", spyglass)
	room("lighthouse", "Lighthouse", "Lightkeeper", sea lantern)
	room("graveyard", "Graveyard", "Undead", skeleton skull)
	room("church", "Church", "Priest", lectern)
	room("prison", "Prison", "Thief", iron bars)
	room("prisonyard", "Prison Yard", "Robber", painting)
	
#room(name, clickregion, eggs per second)
function room(n: text, u: text, tag: text, it: itemtype):
	add {_n} to {rooms::*}
	set {_r} to "eggclicker_%{_n}%"
	set {rooms::%{_n}%::r} to {_r}
	set {rooms::%{_n}%::id} to size of {rooms::*}
	set {rooms::%{_n}%::epc} to clickmoney(size of {rooms::*})
	set {rooms::%{_n}%::c} to price(clickmoney(size of {rooms::*}))
	set {rooms::%{_n}%::it} to {_it}
	set {rooms::%{_n}%::u} to {_u}
	set {rooms::%{_n}%::tag} to {_tag}
    
	
	
on right-click:
	loop {rooms::*}:
		if region at player is {rooms::%loop-value%::r} parsed as region:
			if {ul::%player's uuid%::*} contains {rooms::%loop-value%::id}:
				add round({rooms::%loop-value%::epc} * {multiplier::%player's uuid%}) to {eggs::%player's uuid%}
				chance of 1%:
					add 1 to {tokens::%player's uuid%}
					play sound "block.amethyst_block.hit" to player
				add 1 to {clicks::%player's uuid%}
				add 1 to {clicks}
				send action bar "&e+%getNumberFormatted(round({rooms::%loop-value%::epc} * {multiplier::%player's uuid%}))% Eggs &8(&f%getNumberFormatted({eggs::%player's uuid%})%&8)" to player
			
on region enter:
	loop {rooms::*}:
		if {rooms::%loop-value%::r} parsed as region is event-region:
			if {ul::%player's uuid%::*} does not contain {rooms::%loop-value%::id}:
				cancel event
				send "&cYou have not unlocked this room, do &4/shop&c!" to player

			
function price(n: number) :: number:
	set {_a} to {_n}
	set {_b} to {_n}
	set {_c} to {_n}
	set {_e} to {_n}
	set {_d} to 0
	set {_check} to true

	set {_l} to (length of "%{_a}%") - 1 #2

	loop {_l} times:
		set {_a} to {_a} / 10 #a = 5

	if {_a} is 5:
		set {_e} to {_n} / 2.5 #e = 200
	else:
		set {_e} to {_n} / 2 #e = 0,5

	while {_check} is true:
		set {_l} to (length of "%{_c}%") - 1 #2
		if {_l} is 0:
			set {_l} to 1
		loop {_l} times: #1:c = 500
			if {_c} is 1:
				set {_check} to false
			else:
				set {_f} to {_c} #1:f = 500
				if {_c} is more than 5:
					set {_b} to {_c} / 10 #1:b = 50
				else: 
					set {_b} to {_c}

				if "%{_b}%" contains "5":
					set {_c} to {_c} / 2.5 #c = 200
				else:
					set {_c} to {_f} / 2  #c = 500
				add 1 to {_d}
				
	return (({_e} * 250 + {_e} * {_d} * 50) * 1.5) 
			
function clickmoney(n: number) :: number:
	set {_a} to {_n}
	while {_a} > 3:
		remove 3 from {_a} 
	if {_a} is 3: 
		return 5 * ((10 ^ round(({_n} / 3))) / 10)
	else if {_a} is 2:
		return 2 * ((10 ^ round(({_n} / 3))) / 10)
	else: 
		return 1 * (10 ^ round(({_n} / 3))) 