function loadTokenShop(p: player):
	set {_uuid} to uuid of {_p}
	set {_comingSoon} to gray dye named "&cComing Soon" with lore "&7&oThis buff is not available right now!"
	loadGUI({_p}, "tokenShop", 6, "Token Shop")
	loop integers between 0 and 53:
		setGUISlot({_p}, "tokenShop", loop-integer, black stained glass pane named " ")
	setGUISlot({_p}, "tokenShop", 11, sunflower named "&6&lToken &e&lUpgrades" with lore "&7&oUpgrade your stats!")
	setGUISlot({_p}, "tokenShop", 15, nametag named "&b&lSuffixes" with lore "&7&oGreat for roleplaying!")

	setGUISlot({_p}, "tokenShop", 19, tokenBuffIcon({_p}, "omlettes"))
	setGUISlot({_p}, "tokenShop", 20, tokenBuffIcon({_p}, "scrambledEggs"))
	setGUISlot({_p}, "tokenShop", 21, tokenBuffIcon({_p}, "eggFriedRice"))
	setGUISlot({_p}, "tokenShop", 28, tokenBuffIcon({_p}, "tokenator"))
	setGUISlot({_p}, "tokenShop", 29, tokenBuffIcon({_p}, "tokeneer"))
	setGUISlot({_p}, "tokenShop", 30, tokenBuffIcon({_p}, "tokenBundles"))
	setGUISlot({_p}, "tokenShop", 37, tokenBuffIcon({_p}, "discount"))
	setGUISlot({_p}, "tokenShop", 38, tokenBuffIcon({_p}, "lucky"))
	setGUISlot({_p}, "tokenShop", 39, tokenBuffIcon({_p}, "multiMadness"))

	setGUISlot({_p}, "tokenShop", 23, suffixIcon({_p}, "chicken"))
	setGUISlot({_p}, "tokenShop", 24, suffixIcon({_p}, "gamer"))
	setGUISlot({_p}, "tokenShop", 25, suffixIcon({_p}, "hacker"))
	setGUISlot({_p}, "tokenShop", 32, suffixIcon({_p}, "swedish"))
	setGUISlot({_p}, "tokenShop", 33, suffixIcon({_p}, "drip"))
	setGUISlot({_p}, "tokenShop", 34, suffixIcon({_p}, "pro"))
	setGUISlot({_p}, "tokenShop", 41, suffixIcon({_p}, "noob"))
	setGUISlot({_p}, "tokenShop", 42, suffixIcon({_p}, "nerd"))
	setGUISlot({_p}, "tokenShop", 43, suffixIcon({_p}, "fairy"))
	openGUI({_p}, "tokenShop")

# registerTokenBuff(id, cost, name, lore, icon)
function registerTokenBuff(id: text, cost: number, name: text, lore: text, icon: item):
	set {tokenShop::buffs::%{_id}%::cost} to {_cost}
	set {tokenShop::buffs::%{_id}%::name} to {_name}
	set {tokenShop::buffs::%{_id}%::lore} to {_lore}
	set {tokenShop::buffs::%{_id}%::icon} to {_icon}

function reloadTokenBuffs():
	registerTokenBuff("omlettes", 500, "&eOmlettes", "&7Grants &c10%% &7extra eggs per click!", blaze spawn egg)
	registerTokenBuff("scrambledEggs", 500, "&eScrambled Eggs", "&7Grants &c10%% &7extra eggs per click!", raw gold)
	registerTokenBuff("eggFriedRice", 500, "&eEgg Fried Rice", "&7Grants &c10%% &7extra eggs per click!", honeycomb)
	registerTokenBuff("tokenator", 250, "&eTokenator", "&7Increases your token chance to &c5%%&7!", sunflower)
	registerTokenBuff("tokeneer", 750, "&eTokeneer", "&7Increases the amount of tokens found to &c1-10&7!", gold nugget)
	registerTokenBuff("tokenBundles", 1500, "&eToken Bundles", "&7Grants a small chance to find a &etoken bundle&7!", barrel)
	registerTokenBuff("discount", 1000, "&eDiscount", "&7Grants a &c5%% &7discount in the Room Shop!", emerald)
	registerTokenBuff("lucky", 2500, "&eLucky", "&7Grants a &cvery small &7chance to get big rewards!", big dripleaf)
	registerTokenBuff("multiMadness", 10000, "&eMultiplier Madness", "&7Increases prestige multiplier to &c+0.25&7!", nether star)

command /reloadtokenbuffs:
	permission: op
	trigger:
		reloadTokenBuffs()
		send "&aReloaded token buffs!" to player

function tokenBuffIcon(p: player, buff: text) :: item:
	set {_uuid} to uuid of {_p}
	set {_icon} to {tokenShop::buffs::%{_buff}%::icon}
	set {_name} to {tokenShop::buffs::%{_buff}%::name}
	set {_lore} to {tokenShop::buffs::%{_buff}%::lore}
	if {player::%{_uuid}%::buffs::%{_buff}%} is true: 
		set {_item} to 1 of {_icon} named {_name} with lore "%{_lore}%" and "&a&lUNLOCKED"
		enchant {_item} with mending
		return 1 of ({_item} with hidden enchants flag)
	else:
		return 1 of {_icon} named {_name} with lore "%{_lore}%" and "&dCost &7- &5%{tokenShop::buffs::%{_buff}%::cost}% Tokens", and "&aClick to purchase!"

function useTokenBuff(p: player, id: text):
	set {_uuid} to uuid of {_p}
	{player::%{_uuid}%::buffs::%{_id}%} is not true
	set {_cost} to {tokenShop::buffs::%{_id}%::cost}
	if {player::%{_uuid}%::tokens} >= {_cost}:
		remove {_cost} from {player::%{_uuid}%::tokens}
		set {player::%{_uuid}%::buffs::%{_id}%} to true
		play sound "entity.player.levelup" to {_p}
		loadTokenShop({_p})
	else:
		send "&cYou do not have enough tokens to purchase this!" to {_p}
		play sound "entity.villager.no" to {_p}
	
function suffixIcon(p: player, suffix: text) :: item:
	set {_uuid} to uuid of {_p}
	set {_name} to {suffixes::%{_suffix}%}
	if {player::%{_uuid}%::suffixes::%{_suffix}%} is true:
		if {player::%{_uuid}%::suffix} is {_suffix}:
			return 1 of paper named "%{_name}%&aSuffix" with lore "&eClick to deselect!"
		else:
			return 1 of paper named "%{_name}%&aSuffix" with lore "&eClick to select!"
	else:
		if {player::%{_uuid}%::tokens} >= 5000:
			return 1 of paper named "%{_name}%&eSuffix &8(&75000&8)" with lore "&eClick to purchase!"
		else:
			return 1 of paper named "%{_name}%&cSuffix &8(&75000&8)" with lore "&cNot enough tokens!"

function useSuffix(p: player, suffix: text):
	set {_uuid} to uuid of {_p}
	if {player::%{_uuid}%::suffixes::%{_suffix}%} is true:
		if {player::%{_uuid}%::suffix} is {_suffix}:
			set {player::%{_uuid}%::suffix} to "none"
			send message "&aYou cleared your current suffix!" to {_p}
			play sound "item.armor.equip_iron" to {_p}
		else:
			set {player::%{_uuid}%::suffix} to {_suffix}
			send "&aYou have selected the &e%{suffixes::%{_suffix}%}%&asuffix!" to {_p}
			play sound "item.armor.equip_iron" at pitch 0.75 to {_p}
		loadTokenShop({_p})
	else:
		if {player::%{_uuid}%::tokens} >= 5000:
			remove 5000 from {player::%{_uuid}%::tokens}
			set {player::%{_uuid}%::suffixes::%{_suffix}%} to true
			set {player::%{_uuid}%::suffix} to {_suffix}
			send "&aYou purchased the &e%{suffixes::%{_suffix}%}%&a suffix!" to {_p}
			play sound "entity.player.levelup" to {_p}
			loadTokenShop({_p})
		else:
			send "&cYou do not have enough tokens to purchase this suffix!" to {_p}
			play sound "entity.villager.no" to {_p}

on inventory click:
	if event-inventory = (metadata tag "tokenShop" of player):
		cancel event
		if event-slot is 19:
			useTokenBuff(player, "omlettes")
		else if event-slot is 20:
			useTokenBuff(player, "scrambledEggs")
		else if event-slot is 21:
			useTokenBuff(player, "eggFriedRice")
		else if event-slot is 28:
			useTokenBuff(player, "tokenator")
		else if event-slot is 29:
			useTokenBuff(player, "tokeneer")
		else if event-slot is 30:
			useTokenBuff(player, "tokenBundles")
		else if event-slot is 37:
			useTokenBuff(player, "discount")
		else if event-slot is 38:
			useTokenBuff(player, "lucky")
		else if event-slot is 39:
			useTokenBuff(player, "multiMadness")
		else if event-slot is 23:
			useSuffix(player, "chicken")
		else if event-slot is 24:
			useSuffix(player, "gamer")
		else if event-slot is 25:
			useSuffix(player, "hacker")
		else if event-slot is 32:
			useSuffix(player, "swedish")
		else if event-slot is 33:
			useSuffix(player, "drip")
		else if event-slot is 34:
			useSuffix(player, "pro")
		else if event-slot is 41:
			useSuffix(player, "noob")
		else if event-slot is 42:
			useSuffix(player, "nerd")
		else if event-slot is 43:	
			useSuffix(player, "fairy")