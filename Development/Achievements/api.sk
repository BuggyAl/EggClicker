Options:
	iconLocked: coal
	iconUnlocked: diamond
	secretIconLocked: charcoal
	secretIconUnlocked: emerald

function registerAchievement(id: text, displayName: text, lore: text, secret: boolean): # use \n\ to make a new line in lore!
	unregisterAchievement({_id})
	add {_id} to {achievements::*}
	set {achievements::%{_id}%::displayName} to {_displayName}
	set {achievements::%{_id}%::iconlore::*} to {_lore} split at "\n\"
	set {achievements::%{_id}%::secret} to {_secret}

function unregisterAchievement(id: text):
	remove {_id} from {achievements::*}

function loadAchievementMenu(p: player):
	set {_uuid} to uuid of {_p}

	set {_guiRows} to 6 # gui stuff
	loop integers between 0 and ({_guiRows} * 9):
		add loop-integer to {_iconSlots::*}
	set {_borders::*} to getGUIBorders({_guiRows})
	set {_achievementTotal} to size of {achievements::*} 
	loop {_borders::*}:
		remove loop-value from {_iconSlots::*}
	set {_pages} to ceil({_achievementTotal} / 28)
	if {_pages} is less than 1:
		set {_pages} to 1

	set metadata tag "achievementMenu" of {_p} to chest inventory with {_guiRows} rows named "Your Achievements"

	loop {_borders::*}:
		set slot loop-value of metadata tag "achievementMenu" of {_p} to black stained glass pane named " "

	set {_achievementIDS::*} to {achievements::*}
	loop {_iconSlots::*}:
		loop {_achievementIDS::*}:
			set slot loop-value-1 of metadata tag "achievementMenu" of {_p} to achievementIcon(loop-value-2, {_p})
			remove loop-value-2 from {_achievementIDS::*}
			exit 1 loop

command /clearachievements:
	permission: op
	trigger:
		set {_size} to size of {achievements::*}
		delete {achievements::*}
		send message "&aCleared &e%{_size}% &aachievement(s)!" to player

command /achievements:
	trigger:
		reloadAchievements()
		loadAchievementMenu(player)
		open metadata tag "achievementMenu" of player to player 
	
command /geticon:
	trigger:
		give player 1 of achievementIcon("achievementExample", player)

function achievementIcon(id: text, p: player) :: item:
	set {_uuid} to uuid of {_p}
	if {achievements::%{_id}%::secret} is not true:
		if {%{_uuid}%::achievements::%{_id}%::unlocked} is true:
			return 1 of {@iconUnlocked} named "&a%{achievements::%{_id}%::displayName}%" with lore {achievements::%{_id}%::iconlore::*}, " ", "&7Reward:", "&8Coming Soon!", "", and "&aAchievement Unlocked!"
		else:
			return 1 of {@iconLocked} named "&c%{achievements::%{_id}%::displayName}%" with lore {achievements::%{_id}%::iconlore::*}, " ", "&7Reward:", "&8Coming Soon!", "", and "&cAchievement Locked!"
	else:    
		if {%{_uuid}%::achievements::%{_id}%::unlocked} is true:
			return 1 of {@secretIconUnlocked} named "&a%{achievements::%{_id}%::displayName}% &7(Secret)" with lore {achievements::%{_id}%::iconlore::*}, " ", "&7Reward:", "&8Coming Soon!", "", and "&aAchievement Unlocked!"
		else:
			return 1 of {@secretIconLocked} named "&cSecret Achievement" with lore "&f???", " ", "&7Reward:", "&8Unlock to find out!", "", and "&cAchievement Locked!"

on inventory click:
	if event-inventory = (metadata tag "achievementMenu" of player):
		cancel event
	
function unlockAchievement(id: text, p: player):
	set {_uuid} to uuid of {_p}
	set {%{_uuid}%::achievements::%{_id}%::unlocked} to true
	play sound "entity.experience_orb.pickup" to {_p}
	send "&a>>  Achievement Unlocked: &6%{achievements::%{_id}%::displayName}%  &a<<" to {_p}