function loadTokenShop(p: player):

	set {_uuid} to uuid of {_p}

	loadGUI({_p}, "tokenShop", 6, "Token Shop")
	set {_fill} to black stained glass pane named " "
	set {_borders::*} to getGUIBorders(6)
	loop integers between 0 and 53:
		if {_borders::*} contains loop-integer:
			formatGUISlot({_p}, "tokenShop", loop-integer, {_fill})
	
	formatGUISlot({_p}, "tokenShop", 13, {_fill})
	formatGUISlot({_p}, "tokenShop", 22, {_fill})
	formatGUISlot({_p}, "tokenShop", 31, {_fill})
	formatGUISlot({_p}, "tokenShop", 40, {_fill})

	set {tokenshop::eggBoostII::previous} to "eggBoostI"
	set {tokenshop::eggBoostIII::previous} to "eggBoostII"
	set {tokenshop::tokenBoostII::previous} to "tokenBoostI"
	set {tokenshop::tokenBoostIII::previous} to "tokenBoostII"
	set {tokenshop::multiBoostII::previous} to "multiBoostI"
	set {tokenshop::multiBoostIII::previous} to "multiBoostII"

	set {tokenshop::eggBoostI::cost} to 25
	set {tokenshop::eggBoostII::cost} to 100
	set {tokenshop::eggBoostIII::cost} to 250
	set {tokenshop::tokenBoostI::cost} to 50
	set {tokenshop::tokenBoostII::cost} to 200
	set {tokenshop::tokenBoostIII::cost} to 500
	set {tokenshop::multiBoostI::cost} to 50
	set {tokenshop::multiBoostII::cost} to 200
	set {tokenshop::multiBoostIII::cost} to 500

	set {_eggBoostI} to tokenBuffIcon({_p}, "eggBoostI", "&aEgg Boost I", "&7Gain &c10%% &7more eggs&7!", egg) 
	set {_eggBoostII} to tokenBuffIcon({_p}, "eggBoostII", "&eEgg Boost II", "&7Gain &c25%% &7more eggs&7!", egg) 
	set {_eggBoostIII} to tokenBuffIcon({_p}, "eggBoostIII", "&4Egg Boost III", "&7Gain &c50%% &7more eggs&7!", egg) 
	set {_tokenBoostI} to tokenBuffIcon({_p}, "tokenBoostI", "&aToken Boost I", "&c2%% &7chance to gain tokens.", sunflower) 
	set {_tokenBoostII} to tokenBuffIcon({_p}, "tokenBoostII", "&eToken Boost II", "&c5%% &7chance to gain tokens.", sunflower) 
	set {_tokenBoostIII} to tokenBuffIcon({_p}, "tokenBoostIII", "&4Token Boost III", "&c10%% &7chance to gain tokens.", sunflower) 
	set {_multiBoostI} to tokenBuffIcon({_p}, "multiBoostI", "&aMultiplier I", "&7Increase your multiplier by &c2&7!", emerald) 
	set {_multiBoostII} to tokenBuffIcon({_p}, "multiBoostII", "&eMultiplier II", "&7Increase your multiplier by &c5&7!", emerald) 
	set {_multiBoostIII} to tokenBuffIcon({_p}, "multiBoostIII", "&4Multiplier III", "&7Increase your multiplier by &c10&7!", emerald) 

	set {_tokenMinion} to wooden pickaxe named "&6&lToken Miner" with lore "&7&oCurrently unavailable."
	set {_treasureFinder} to filled map named "&6&lTreasure Finder" with lore "&7&oCurrently unavailable."

	set {_multi} to stat({_p}, "multiplier")

	if {_multi} is greater than or equal to 25:
		set {_overflow} to {player::%{_uuid}%::overflowMultiBought}
		set {_price} to ({_overflow} ^ 2.5) + 500
		set {_multiplier} to nether star named "&6&lOverflow Multiplier &7(%{_multi}% &7→ %{_multi} + 0.1%&7)" with lore "&7Purchase overflow multiplier!", "&5Cost (%{_overflow}%) &7- &d%formatNum(round({_price}))% Tokens", and "&aClick to purchase!"
	else:
		set {_price} to 250 * stat({_p}, "tokenchance")
		set {_multiplier} to nether star named "&6&lMultiplier &7(%{_multi}% &7→ %{_multi} + 0.25%&7)" with lore "&7Purchase more multiplier!", "&5Cost &7- &d%formatNum(round({_price}))% Tokens", and "&aClick to purchase!"

	formatGUISlot({_p}, "tokenShop", 10, {_eggBoostI})
	formatGUISlot({_p}, "tokenShop", 11, {_eggBoostII})
	formatGUISlot({_p}, "tokenShop", 12, {_eggBoostIII})
	formatGUISlot({_p}, "tokenShop", 19, {_tokenBoostI})
	formatGUISlot({_p}, "tokenShop", 20, {_tokenBoostII})
	formatGUISlot({_p}, "tokenShop", 21, {_tokenBoostIII})
	formatGUISlot({_p}, "tokenShop", 28, {_multiBoostI})
	formatGUISlot({_p}, "tokenShop", 29, {_multiBoostII})
	formatGUISlot({_p}, "tokenShop", 30, {_multiBoostIII})

	formatGUISlot({_p}, "tokenShop", 37, {_tokenMinion})
	formatGUISlot({_p}, "tokenShop", 38, {_treasureFinder})
	formatGUISlot({_p}, "tokenShop", 39, {_multiplier})

	openGUI({_p}, "tokenShop")


function buyTokenBuff(p: player, buff: text):
	set {_uuid} to uuid of {_p}
	if {player::%{_uuid}%::buffs::*} contains {_buff}:
		stop
	if {tokenshop::%{_buff}%::previous} is set:
		if {player::%{_uuid}%::buffs::*} contains {tokenshop::%{_buff}%::previous}:
			tokenTransaction({_p}, {_buff})
		else:
			send action bar "&cYou do not have the previous tier!" to {_p}
			play sound "entity.villager.no" to {_p}
	else:
		tokenTransaction({_p}, {_buff})


function tokenTransaction(p: player, buff: text):
	set {_uuid} to uuid of {_p}
	if {player::%{_uuid}%::tokens} is greater than or equal to {tokenshop::%{_buff}%::cost}:
		# purchase success
		remove {tokenshop::%{_buff}%::cost} from {player::%{_uuid}%::tokens}
		add {_buff} to {player::%{_uuid}%::buffs::*}
		if {_buff} is "eggBoostI":
			set {player::%{_uuid}%::eggboost} to 1.1
		else if {_buff} is "eggBoostII":
			set {player::%{_uuid}%::eggboost} to 1.25
		else if {_buff} is "eggBoostIII":
			set {player::%{_uuid}%::eggboost} to 1.5
		else if {_buff} is "tokenBoostI":
			set {player::%{_uuid}%::tokenchance} to 2
		else if {_buff} is "tokenBoostII":
			set {player::%{_uuid}%::tokenchance} to 5
		else if {_buff} is "tokenBoostIII":
			set {player::%{_uuid}%::tokenchance} to 10
		else if {_buff} is "multiBoostI":
			set {player::%{_uuid}%::multibuff} to 2
		else if {_buff} is "multiBoostII":
			set {player::%{_uuid}%::multibuff} to 5
		else if {_buff} is "multiBoostIII":
			set {player::%{_uuid}%::multibuff} to 10
		send action bar "&aBuff Purchased!" to {_p}
		play sound "block.note_block.chime" to {_p}
		loadTokenShop({_p})
	else:
		# not enough tokens
		send action bar "&cYou do not have enough tokens!" to {_p}
		play sound "entity.villager.no" to {_p}


on inventory click:
	if event-inventory = (metadata tag "tokenShop" of player):
		cancel event

		if event-slot is 10:
			buyTokenBuff(player, "eggBoostI")
		else if event-slot is 11:
			buyTokenBuff(player, "eggBoostII")
		else if event-slot is 12:
			buyTokenBuff(player, "eggBoostIII")
		else if event-slot is 19:
			buyTokenBuff(player, "tokenBoostI")
		else if event-slot is 20:
			buyTokenBuff(player, "tokenBoostII")
		else if event-slot is 21:
			buyTokenBuff(player, "tokenBoostIII")
		else if event-slot is 28:
			buyTokenBuff(player, "multiBoostI")
		else if event-slot is 29:
			buyTokenBuff(player, "multiBoostII")
		else if event-slot is 30:
			buyTokenBuff(player, "multiBoostIII")
		# else if event-slot is 37:
		# 	buyTokenBuff(player, "tokenMinion")
		# else if event-slot is 38:
		# 	buyTokenBuff(player, "treasureFinder")
		else if event-slot is 39:
			buyMultiplier(player)

function buyMultiplier(p: player):

	set {_uuid} to uuid of {_p}

	set {_tokens} to stat({_p}, "tokens")

	if stat({_p}, "multiplier") is less than 25:
		set {_price} to round(250 * stat({_p}, "tokenchance"))
		if {_tokens} is greater than or equal to {_price}:
			remove {_price} from {player::%{_uuid}%::tokens}
			add 0.25 to {player::%{_uuid}%::multiplier}
			play sound "block.note_block.chime" to {_p}
			loadTokenShop({_p})
		else: 
			send action bar "&cYou do not have enough tokens!" to {_p}
			play sound "entity.villager.no" to {_p}
	else:
		set {_overflow} to stat({_p}, "overflowMultiBought")
		set {_price} to round(({_overflow} ^ 2.5) + 500)
		if {_tokens} is greater than or equal to {_price}:
			remove {_price} from {player::%{_uuid}%::tokens}
			add 0.1 to {player::%{_uuid}%::multiplier}
			add 1 to {player::%{_uuid}%::overflowMultiBought}
			play sound "block.note_block.chime" to {_p}
			loadTokenShop({_p})
		else: 
			send action bar "&cYou do not have enough tokens!" to {_p}
			play sound "entity.villager.no" to {_p}