on region enter:
	loop {rooms::*}:
		if region("room-%loop-index%") is event-region:
			if {player::%player's uuid%::unlocked::*} doesn't contain loop-index:
				cancel event

# Room Types:
# 1. room
# 2. extension

function registerRoom(name: text, id: integer, type: number):
	delete {rooms::%{_name}%::*}
	delete {rooms::%{_name}%}
	set {rooms::%{_name}%} to {_id}
	set {rooms::%{_name}%::type} to {_type}

function getRoomID(name: text) :: integer:
	if {rooms::%{_name}%} exists:
		return {rooms::%{_name}%}

function getRoom(id: integer) :: text:
	loop {rooms::*}:
		if loop-value is {_id}:
			return loop-value

function getHighestRoom(id: integer) :: text:
	return getRoom({_id})

function getHighestRoomID() :: integer:
	set {_highestID} to 0
	loop {rooms::*}:
		if loop-value is greater than {_highestID}:
			set {_highestID} to loop-value
	return {_highestID}

function addExtension(extension: text, main: text):
	if {rooms::%{_main}%} exists: 
		if {rooms::%{_main}%::type} is 1:
			if {rooms::%{_extension}%::type} is 2:
				add {_extension} to {rooms::%{_main}%::extensions::*}

function addEggs(room: text, eggs: integer): # can be used for multiple bonuses in future!!!
	if {rooms::%{_room}%} exists:
		set {rooms::%{_room}%::eggs} to {_eggs}

command /toggleroomaccess [<text>] [<offline player>]:
	permission: dev.toggleroomaccess
	permission message: &cYou do not have permission to use this command!
	trigger:

		if arg-1 is not set:
			send "&aPlease specify a region name!"
			stop
		if {rooms::%arg-1%} does not exist:
			send "&aInvalid region name!"
			stop

		if arg-2 is set:
			toggleRoomAccess(arg-2, arg-1)
			set {_uuid} to uuid of arg-2
			set {_unlocked} to isUnlocked(arg-2, arg-1)
			send "&aSet room access for &e%arg-2%&a in region &e%arg-1% &ato &e%{_unlocked}%&a!" to player			
		else:
			toggleRoomAccess(player, arg-1)
			set {_unlocked} to isUnlocked(player, arg-1)
			send "&aSet your room access in region &e%arg-1% &ato &e%{_unlocked}%&a!" to player

command /viewmyrooms:
	permission: op
	trigger:
		send {player::%player's uuid%::unlocked::*}

function toggleRoomAccess(p: player, room: text):
	if {rooms::%{_room}%} exists:
		set {_uuid} to uuid of {_p}

		if {player::%{_uuid}%::unlocked::*} contains {_room}:
			remove {_room} from {player::%{_uuid}%::unlocked::*}
			loop {rooms::%{_room}%::extensions::*}:
				remove loop-value from {player::%{_uuid}%::unlocked::*}

		else:
			add {_room} to {player::%{_uuid}%::unlocked::*}
			loop {rooms::%{_room}%::extensions::*}:
				add loop-value to {player::%{_uuid}%::unlocked::*}

function isUnlocked(p: player, room: text) :: boolean:
	set {_uuid} to uuid of {_p}
	if {player::%{_uuid}%::unlocked::*} contains {_room}:
		return true
	else:
		return false

command /stuck:
	trigger:
		push player upwards at speed 0.2

on tab complete of "/toggleroomaccess":
	set tab completions for position 1 to (indexes of {rooms::*})
	set tab completions for position 2 to all offline players