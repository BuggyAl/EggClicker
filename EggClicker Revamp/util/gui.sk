function loadGUI(p: player, id: text, rows: integer, display: text):
	set {_uuid} to uuid of {_p}
	if {_rows} is greater than 6:
		stop
	if {_rows} is less than 1:
		stop
	set metadata tag {_id} of {_p} to chest inventory with {_rows} rows named {_display}

function formatGUISlot(p: player, id: text, slot: int, item: item):
	set slot {_slot} of metadata tag {_id} of {_p} to {_item}

function getGUIBorders(rows: integer) :: objects: # get the border slots in a GUI with a pecified number of rows
	clear {_borders::*}

	loop integers between 0 and 9: # first row and front of 2nd row
		add loop-integer to {_borders::*}

	set {_lastSlot} to ({_rows} * 9) - 1 # end of 2nd to last row and last row
	set {_finalFillStart} to {_lastSlot} - 9
	loop integers between {_finalFillStart} and {_lastSlot}:
		add loop-integer to {_borders::*}	

	set {_edgeLoopStart} to {_finalFillStart} - 8 # edges of GUI
	loop integers between 18 and {_edgeLoopStart}:
		if loop-integer is divisible by 9:
			set {_baseNum} to loop-integer
			set {_baseNumRight} to {_baseNum} - 1
			add {_baseNum} to {_borders::*}
			add {_baseNumRight} to {_borders::*}
	return {_borders::*}

function roomIcon(p: player, id: text, name: text, icon: item) :: item:
	set {_uuid} to uuid of {_p}
	if {player::%{_uuid}%::unlocked::*} contains {_id}:
		set {_item} to {_icon} named "&b%{_name}%" with lore "&dEggs Per Click &7- &5%{rooms::%{_id}%::eggs}%" and "&a&lUNLOCKED"
		enchant {_item} with mending
		return 1 of ({_item} with hidden enchants flag)
	else:
		return 1 of {_icon} named "&b%{_name}%" with lore "&dEggs Per Click &7- &5%{rooms::%{_id}%::eggs}%", "&dCost &7- &5%{rooms::%{_id}%::cost}% Eggs", and "&aClick to buy!"

function prestigeIcon(p: player) :: item:
	set {_uuid} to uuid of {_p}
	set {_prestige} to {player::%{_uuid}%::prestige}
	return 1 of beacon named "&a&lPrestige" with lore "&7(%{_prestige}% &7â†’ %{_prestige} + 1%&7)", "&dCost &7- &5%formatNum(prestigePrice({_p}))% Eggs", and "&aClick to buy!"

function tokenBuffIcon(p: player, buff: text, name: text, lore: text, icon: item) :: item:
	set {_uuid} to uuid of {_p}

	if {player::%{_uuid}%::buffs::*} contains {_buff}:
		set {_item} to {_icon} named {_name} with lore "%{_lore}%" and "&a&lUNLOCKED"
		enchant {_item} with mending
		return 1 of ({_item} with hidden enchants flag)
	else:
		if {tokenshop::%{_buff}%::previous} is set:
			if {player::%{_uuid}%::buffs::*} does not contain {tokenshop::%{_buff}%::previous}:
				return 1 of {_icon} named {_name} with lore "%{_lore}%" and "&c&lLOCKED"
			else:
				return 1 of {_icon} named {_name} with lore "%{_lore}%", "&dCost &7- &5%{tokenshop::%{_buff}%::cost}% Tokens", and "&aClick to purchase!"
		else:
			return 1 of {_icon} named {_name} with lore "%{_lore}%", "&dCost &7- &5%{tokenshop::%{_buff}%::cost}% Tokens", and "&aClick to purchase!"


function openGUI(p: player, id: text):
	open (metadata tag {_id} of {_p}) to {_p}